This is a recreation of the classic snake game.
The data structure used for building the sanke is an 2D array where the syntax is in this format a[x][y] where x stores the x coordinates
and y stores the y coordinates of the snake

Function descriptions:
1. gotoxy :is used to move to a certain(x,y) coordinates
         -> coord struct var is part of windows.h
2.clrscr-> used to clear screen 
3.waitForAnyKey-> identifies if any key is pressed uses the inbuilt funstion kbhit()
4.getGamespeed-> gets the speed of the snake from the user
5.pauseMenu-> pauses the game
6.exitYN-> exits the game
7.checkKeyPressed -> uses kbhit() function checks if a key has pressed, then checks if its any of the arrow keys/ p/esc key. It changes direction acording to the 
key pressed.
8.collisionsnake-> checks if the snake collided with itself by cycling around checking if the x y coordinates ='s the snake coordinates as one of this parts ==> if the 
snake length<=4 it cant collidw with itself
9.generateFood->Generates food & Makes sure the food doesn't appear on top of the snake
10.moveSnakeArray->changing the snake array to move
This:
 x 1 2 3 4 5 6
 y 1 1 1 1 1 1
Becomes This:
 x 1 1 2 3 4 5
 y 1 1 1 1 1 1
 
 Then depending on the direction (in this case west - left) it becomes:
 
 x 0 1 2 3 4 5
 y 1 1 1 1 1 1
 
 snakeXY[0][0]--; <- if direction left, take 1 away from the x coordinate
11.move-> used to move the snake 
12.eatFood->This function checks if the snakes head is on top of the food, if it is then it'll generate some more food
13.CollisionDetection-> detects if the snake has collided with the border or with itself
14.Refreshinfobar-> prints the infobar
15.createHighCSores, getLowestScore,inputscore ,displayhighScore-> all these functions are used to kepp track of the scores, this keeps track of 5 highest scores using
a .txt file
16.youwinscreen, gameoverscreen->it prints you win/game over, when the snake length is equal to or greater than 305 then u win the game,when u win u get an extra 1500
points
17.Start =game-> used to start the game
18.loadEnvironment-> prints the the borders
19.loadSnake-> used to print the snake
	The snake doesn't actually have enough XY coordinates (only 1 - the starting location), thus we use
	these XY coordinates to "create" the other coordinates. For this we can actually use the function used to move the snake.
	This helps create a "whole" snake instead of one "dot", when someone starts a game.
	moveSnakeArray(snakeXY, snakeLength); //One thing to note ATM, the snake starts of one coordinate to whatever direction it's pointing
20.prepairSnake->function initializes a 2-dimensional array to represent the positions of a snake in a game.
21.loadGame->This function loads the enviroment, snake, etc
22.menuSelector, welcomeArt,controls,mainMenu-> all helps create the menu
23.int main